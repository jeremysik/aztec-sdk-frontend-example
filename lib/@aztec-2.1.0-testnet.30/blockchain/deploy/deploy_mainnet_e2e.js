"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deployMainnetE2e = void 0;
const deployers_1 = require("./deployers");
const gasLimit = 5000000;
const escapeBlockLower = 2160;
const escapeBlockUpper = 2400;
const DAI_ADDRESS = '0x6b175474e89094c44da98b954eedeac495271d0f';
const LIDO_WSTETH_ADDRESS = '0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0';
const UNISWAP_ROUTER_ADDRESS = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D';
const DAI_PRICE_FEED_ADDRESS = '0x773616E4d11A78F511299002da57A0a94577F1f4';
const FAST_GAS_PRICE_FEED_ADDRESS = '0x169e633a2d1e6c10dd91238ba11c4a708dfef37c';
async function deployMainnetE2e(signer, { dataTreeSize, roots }, vk) {
    const verifier = vk ? await (0, deployers_1.deployVerifier)(signer, vk) : await (0, deployers_1.deployMockVerifier)(signer);
    const defiProxy = await (0, deployers_1.deployDefiBridgeProxy)(signer);
    const rollup = await (0, deployers_1.deployRollupProcessor)(signer, verifier, defiProxy, escapeBlockLower, escapeBlockUpper, roots.dataRoot, roots.nullRoot, roots.rootsRoot, dataTreeSize, true);
    const feeDistributor = await (0, deployers_1.deployFeeDistributor)(signer, rollup, UNISWAP_ROUTER_ADDRESS);
    await rollup.setSupportedAsset(DAI_ADDRESS, 0, { gasLimit });
    await rollup.setSupportedAsset(LIDO_WSTETH_ADDRESS, 0, { gasLimit });
    await rollup.setSupportedAsset(deployers_1.elementTokenAddresses['lusd3crv-f'], 0, { gasLimit });
    await rollup.setSupportedAsset(deployers_1.elementTokenAddresses['mim-3lp3crv-f'], 0, { gasLimit });
    const expiryCutOff = new Date('01 Sept 2022 00:00:00 GMT');
    await (0, deployers_1.deployElementBridge)(signer, rollup, ['dai', 'lusd3crv-f'], expiryCutOff);
    await (0, deployers_1.deployLidoBridge)(signer, rollup);
    const priceFeeds = [FAST_GAS_PRICE_FEED_ADDRESS, DAI_PRICE_FEED_ADDRESS];
    return { rollup, priceFeeds, feeDistributor };
}
exports.deployMainnetE2e = deployMainnetE2e;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVwbG95X21haW5uZXRfZTJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2RlcGxveS9kZXBsb3lfbWFpbm5ldF9lMmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRUEsMkNBU3FCO0FBRXJCLE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQztBQUN6QixNQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQztBQUM5QixNQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQztBQUU5QixNQUFNLFdBQVcsR0FBRyw0Q0FBNEMsQ0FBQztBQUNqRSxNQUFNLG1CQUFtQixHQUFHLDRDQUE0QyxDQUFDO0FBQ3pFLE1BQU0sc0JBQXNCLEdBQUcsNENBQTRDLENBQUM7QUFDNUUsTUFBTSxzQkFBc0IsR0FBRyw0Q0FBNEMsQ0FBQztBQUM1RSxNQUFNLDJCQUEyQixHQUFHLDRDQUE0QyxDQUFDO0FBRTFFLEtBQUssVUFBVSxnQkFBZ0IsQ0FBQyxNQUFjLEVBQUUsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFnQixFQUFFLEVBQVc7SUFDdkcsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLElBQUEsMEJBQWMsRUFBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sSUFBQSw4QkFBa0IsRUFBQyxNQUFNLENBQUMsQ0FBQztJQUMxRixNQUFNLFNBQVMsR0FBRyxNQUFNLElBQUEsaUNBQXFCLEVBQUMsTUFBTSxDQUFDLENBQUM7SUFDdEQsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFBLGlDQUFxQixFQUN4QyxNQUFNLEVBQ04sUUFBUSxFQUNSLFNBQVMsRUFDVCxnQkFBZ0IsRUFDaEIsZ0JBQWdCLEVBQ2hCLEtBQUssQ0FBQyxRQUFRLEVBQ2QsS0FBSyxDQUFDLFFBQVEsRUFDZCxLQUFLLENBQUMsU0FBUyxFQUNmLFlBQVksRUFDWixJQUFJLENBQ0wsQ0FBQztJQUNGLE1BQU0sY0FBYyxHQUFHLE1BQU0sSUFBQSxnQ0FBb0IsRUFBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLHNCQUFzQixDQUFDLENBQUM7SUFFMUYsTUFBTSxNQUFNLENBQUMsaUJBQWlCLENBQUMsV0FBVyxFQUFFLENBQUMsRUFBRSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDN0QsTUFBTSxNQUFNLENBQUMsaUJBQWlCLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxFQUFFLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUNyRSxNQUFNLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxpQ0FBcUIsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBQ3JGLE1BQU0sTUFBTSxDQUFDLGlCQUFpQixDQUFDLGlDQUFxQixDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFeEYsTUFBTSxZQUFZLEdBQUcsSUFBSSxJQUFJLENBQUMsMkJBQTJCLENBQUMsQ0FBQztJQUMzRCxNQUFNLElBQUEsK0JBQW1CLEVBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQztJQUMvRSxNQUFNLElBQUEsNEJBQWdCLEVBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBRXZDLE1BQU0sVUFBVSxHQUFHLENBQUMsMkJBQTJCLEVBQUUsc0JBQXNCLENBQUMsQ0FBQztJQUV6RSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUUsQ0FBQztBQUNoRCxDQUFDO0FBN0JELDRDQTZCQyJ9