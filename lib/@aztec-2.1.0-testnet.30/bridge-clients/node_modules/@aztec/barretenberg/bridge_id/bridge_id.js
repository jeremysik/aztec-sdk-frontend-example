"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BridgeId = void 0;
const asset_1 = require("../asset");
const bigint_buffer_1 = require("../bigint_buffer");
const bit_config_1 = require("./bit_config");
const bridge_id_config_1 = require("./bridge_id_config");
const randomInt = (to = 2 ** 30 - 1) => Math.floor(Math.random() * (to + 1));
const getNumber = (val, offset, size) => Number((val >> BigInt(offset)) & ((BigInt(1) << BigInt(size)) - BigInt(1)));
class BridgeId {
    constructor(addressId, inputAssetIdA, outputAssetIdA, inputAssetIdB, outputAssetIdB, auxData = 0) {
        this.addressId = addressId;
        this.inputAssetIdA = inputAssetIdA;
        this.outputAssetIdA = outputAssetIdA;
        this.inputAssetIdB = inputAssetIdB;
        this.outputAssetIdB = outputAssetIdB;
        this.auxData = auxData;
        const secondInputVirtual = inputAssetIdB !== undefined && (0, asset_1.isVirtualAsset)(inputAssetIdB);
        const secondOutputVirtual = outputAssetIdB !== undefined && (0, asset_1.isVirtualAsset)(outputAssetIdB);
        this.bitConfig = new bit_config_1.BitConfig((0, asset_1.isVirtualAsset)(inputAssetIdA), secondInputVirtual, (0, asset_1.isVirtualAsset)(outputAssetIdA), secondOutputVirtual, inputAssetIdB !== undefined && !secondInputVirtual, outputAssetIdB !== undefined && !secondOutputVirtual);
    }
    static random() {
        return new BridgeId(randomInt(), randomInt(), randomInt(), randomInt(), randomInt(), randomInt());
    }
    static fromBigInt(val) {
        const bitConfig = bit_config_1.BitConfig.fromBigInt(BigInt(getNumber(val, bridge_id_config_1.BITCONFIG_OFFSET, bridge_id_config_1.BITCONFIG_LEN)));
        if (bitConfig.secondInputReal && bitConfig.secondInputVirtual) {
            throw new Error('Invalid second input config.');
        }
        if (bitConfig.secondOutputReal && bitConfig.secondOutputVirtual) {
            throw new Error('Invalid second output config.');
        }
        const hasSecondInput = bitConfig.secondInputReal || bitConfig.secondInputVirtual;
        const hasSecondOutput = bitConfig.secondOutputReal || bitConfig.secondOutputVirtual;
        return new BridgeId(getNumber(val, bridge_id_config_1.ADDRESS_OFFSET, bridge_id_config_1.ADDRESS_BIT_LEN), getNumber(val, bridge_id_config_1.INPUT_ASSET_ID_A_OFFSET, bridge_id_config_1.INPUT_ASSET_ID_A_LEN) +
            (bitConfig.firstInputVirtual ? bridge_id_config_1.virtualAssetIdFlag : 0), getNumber(val, bridge_id_config_1.OUTPUT_ASSET_ID_A_OFFSET, bridge_id_config_1.OUTPUT_ASSET_ID_A_LEN) +
            (bitConfig.firstOutputVirtual ? bridge_id_config_1.virtualAssetIdFlag : 0), hasSecondInput
            ? getNumber(val, bridge_id_config_1.INPUT_ASSET_ID_B_OFFSET, bridge_id_config_1.INPUT_ASSET_ID_B_LEN) +
                (bitConfig.secondInputVirtual ? bridge_id_config_1.virtualAssetIdFlag : 0)
            : undefined, hasSecondOutput
            ? getNumber(val, bridge_id_config_1.OUTPUT_ASSET_ID_B_OFFSET, bridge_id_config_1.OUTPUT_ASSET_ID_B_LEN) +
                (bitConfig.secondOutputVirtual ? bridge_id_config_1.virtualAssetIdFlag : 0)
            : undefined, getNumber(val, bridge_id_config_1.AUX_DATA_OFFSET, bridge_id_config_1.AUX_DATA_LEN));
    }
    static fromBuffer(buf) {
        if (buf.length !== 32) {
            throw new Error('Invalid buffer.');
        }
        return BridgeId.fromBigInt((0, bigint_buffer_1.toBigIntBE)(buf));
    }
    static fromString(str) {
        return BridgeId.fromBuffer(Buffer.from(str.replace(/^0x/i, ''), 'hex'));
    }
    get firstInputVirtual() {
        return this.bitConfig.firstInputVirtual;
    }
    get secondInputVirtual() {
        return this.bitConfig.secondInputVirtual;
    }
    get firstOutputVirtual() {
        return this.bitConfig.firstOutputVirtual;
    }
    get secondOutputVirtual() {
        return this.bitConfig.secondOutputVirtual;
    }
    get secondInputReal() {
        return this.bitConfig.secondInputReal;
    }
    get secondOutputReal() {
        return this.bitConfig.secondOutputReal;
    }
    get numInputAssets() {
        return this.secondInputReal || this.secondInputVirtual ? 2 : 1;
    }
    get numOutputAssets() {
        return this.secondOutputReal || this.secondOutputVirtual ? 2 : 1;
    }
    toBigInt() {
        return (BigInt(this.addressId) +
            (BigInt(this.inputAssetIdA - (this.bitConfig.firstInputVirtual ? bridge_id_config_1.virtualAssetIdFlag : 0)) <<
                BigInt(bridge_id_config_1.INPUT_ASSET_ID_A_OFFSET)) +
            (BigInt((this.inputAssetIdB || 0) - (this.bitConfig.secondInputVirtual ? bridge_id_config_1.virtualAssetIdFlag : 0)) <<
                BigInt(bridge_id_config_1.INPUT_ASSET_ID_B_OFFSET)) +
            (BigInt(this.outputAssetIdA - (this.bitConfig.firstOutputVirtual ? bridge_id_config_1.virtualAssetIdFlag : 0)) <<
                BigInt(bridge_id_config_1.OUTPUT_ASSET_ID_A_OFFSET)) +
            (BigInt((this.outputAssetIdB || 0) - (this.bitConfig.secondOutputVirtual ? bridge_id_config_1.virtualAssetIdFlag : 0)) <<
                BigInt(bridge_id_config_1.OUTPUT_ASSET_ID_B_OFFSET)) +
            (this.bitConfig.toBigInt() << BigInt(bridge_id_config_1.BITCONFIG_OFFSET)) +
            (BigInt(this.auxData) << BigInt(bridge_id_config_1.AUX_DATA_OFFSET)));
    }
    toBuffer() {
        return (0, bigint_buffer_1.toBufferBE)(this.toBigInt(), 32);
    }
    toString() {
        return `0x${this.toBuffer().toString('hex')}`;
    }
    equals(id) {
        return id.toBuffer().equals(this.toBuffer());
    }
}
exports.BridgeId = BridgeId;
BridgeId.ZERO = new BridgeId(0, 0, 0);
BridgeId.ENCODED_LENGTH_IN_BYTES = 32;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJpZGdlX2lkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2JyaWRnZV9pZC9icmlkZ2VfaWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsb0NBQTBDO0FBQzFDLG9EQUEwRDtBQUMxRCw2Q0FBeUM7QUFDekMseURBZ0I0QjtBQUU1QixNQUFNLFNBQVMsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUU3RSxNQUFNLFNBQVMsR0FBRyxDQUFDLEdBQVcsRUFBRSxNQUFjLEVBQUUsSUFBWSxFQUFFLEVBQUUsQ0FDOUQsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUU5RSxNQUFhLFFBQVE7SUFNbkIsWUFDa0IsU0FBaUIsRUFDakIsYUFBcUIsRUFDckIsY0FBc0IsRUFDdEIsYUFBc0IsRUFDdEIsY0FBdUIsRUFDdkIsVUFBVSxDQUFDO1FBTFgsY0FBUyxHQUFULFNBQVMsQ0FBUTtRQUNqQixrQkFBYSxHQUFiLGFBQWEsQ0FBUTtRQUNyQixtQkFBYyxHQUFkLGNBQWMsQ0FBUTtRQUN0QixrQkFBYSxHQUFiLGFBQWEsQ0FBUztRQUN0QixtQkFBYyxHQUFkLGNBQWMsQ0FBUztRQUN2QixZQUFPLEdBQVAsT0FBTyxDQUFJO1FBRTNCLE1BQU0sa0JBQWtCLEdBQUcsYUFBYSxLQUFLLFNBQVMsSUFBSSxJQUFBLHNCQUFjLEVBQUMsYUFBYSxDQUFDLENBQUM7UUFDeEYsTUFBTSxtQkFB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