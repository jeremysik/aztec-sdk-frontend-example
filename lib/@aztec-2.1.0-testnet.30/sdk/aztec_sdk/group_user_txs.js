"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.groupUserTxs = void 0;
const bridge_id_1 = require("@aztec/barretenberg/bridge_id");
const client_proofs_1 = require("@aztec/barretenberg/client_proofs");
const user_tx_1 = require("../user_tx");
const emptyAssetValue = { assetId: 0, value: BigInt(0) };
const toUserAccountTx = ({ txId, userId, aliasHash, newSigningPubKey1, newSigningPubKey2, migrated, created, settled }, fee) => new user_tx_1.UserAccountTx(txId, userId, aliasHash, newSigningPubKey1, newSigningPubKey2, migrated, fee, created, settled);
const toUserPaymentTx = ({ txId, userId, proofId, publicOwner, isSender, created, settled }, value, fee) => {
    return new user_tx_1.UserPaymentTx(txId, userId, proofId, value, fee, publicOwner, isSender, created, settled);
};
const getUserDefiInteractionResultState = ({ settled, finalised, claimSettled }) => {
    if (claimSettled) {
        return user_tx_1.UserDefiInteractionResultState.SETTLED;
    }
    if (finalised) {
        return user_tx_1.UserDefiInteractionResultState.AWAITING_SETTLEMENT;
    }
    if (settled) {
        return user_tx_1.UserDefiInteractionResultState.AWAITING_FINALISATION;
    }
    return user_tx_1.UserDefiInteractionResultState.PENDING;
};
const toUserDefiTx = (tx, fee) => {
    const { txId, userId, bridgeId, depositValue, created, settled, interactionNonce, isAsync, success, outputValueA, outputValueB, finalised, claimSettled, } = tx;
    const state = getUserDefiInteractionResultState(tx);
    return new user_tx_1.UserDefiTx(txId, userId, bridgeId, { assetId: bridgeId.inputAssetIdA, value: depositValue }, fee, created, settled, {
        state,
        isAsync,
        interactionNonce,
        success,
        outputValueA: outputValueA !== undefined
            ? {
                assetId: bridgeId.firstOutputVirtual ? interactionNonce + bridge_id_1.virtualAssetIdFlag : bridgeId.outputAssetIdA,
                value: outputValueA,
            }
            : undefined,
        outputValueB: outputValueB !== undefined && bridgeId.outputAssetIdB !== undefined
            ? {
                assetId: bridgeId.secondOutputVirtual ? interactionNonce + bridge_id_1.virtualAssetIdFlag : bridgeId.outputAssetIdB,
                value: outputValueB,
            }
            : undefined,
        claimSettled,
        finalised,
    });
};
const toUserDefiClaimTx = (claimTxId, { txId, userId, bridgeId, depositValue, interactionResult: { success, outputValueA, outputValueB, claimSettled }, }) => new user_tx_1.UserDefiClaimTx(claimTxId, txId, userId, bridgeId, depositValue, success, outputValueA, outputValueB, claimSettled);
const getPaymentValue = ({ proofId, assetId, publicValue, privateInput, recipientPrivateOutput, senderPrivateOutput, isRecipient, }) => {
    const value = (() => {
        switch (proofId) {
            case client_proofs_1.ProofId.DEPOSIT: {
                const outputValue = recipientPrivateOutput + senderPrivateOutput;
                return outputValue || isRecipient ? outputValue : publicValue;
            }
            case client_proofs_1.ProofId.WITHDRAW:
                return publicValue;
            case client_proofs_1.ProofId.SEND:
                if (isRecipient || recipientPrivateOutput) {
                    return recipientPrivateOutput;
                }
                return privateInput;
        }
    })();
    return { assetId, value };
};
const getFee = (tx) => {
    if (tx.proofId === client_proofs_1.ProofId.ACCOUNT) {
        return emptyAssetValue;
    }
    if (tx.proofId === client_proofs_1.ProofId.DEFI_DEPOSIT) {
        const { bridgeId, txFee } = tx;
        return { assetId: bridgeId.inputAssetIdA, value: txFee };
    }
    const { proofId, assetId, publicValue, privateInput, recipientPrivateOutput, senderPrivateOutput, isRecipient, isSender, } = tx;
    const value = (() => {
        switch (proofId) {
            case client_proofs_1.ProofId.DEPOSIT: {
                const outputValue = recipientPrivateOutput + senderPrivateOutput;
                return outputValue || (isSender && isRecipient) ? publicValue - outputValue : BigInt(0);
            }
            case client_proofs_1.ProofId.WITHDRAW:
                return privateInput - publicValue;
            case client_proofs_1.ProofId.SEND:
                if (!isSender || (!isRecipient && !recipientPrivateOutput)) {
                    return BigInt(0);
                }
                return privateInput - recipientPrivateOutput - senderPrivateOutput;
        }
    })();
    return {
        assetId,
        value,
    };
};
const getTotalFee = (txs) => {
    if (!txs.length) {
        return emptyAssetValue;
    }
    const fees = txs.map(getFee);
    const { assetId } = fees.find(fee => fee.value) || fees[0];
    if (fees.some(fee => fee.value && fee.assetId !== assetId)) {
        throw new Error('Inconsistent fee paying assets.');
    }
    return { assetId, value: fees.reduce((sum, fee) => sum + fee.value, BigInt(0)) };
};
const getPrimaryTx = (txs) => txs.find(tx => !tx.txRefNo) ||
    txs.find(tx => [client_proofs_1.ProofId.ACCOUNT, client_proofs_1.ProofId.DEFI_DEPOSIT, client_proofs_1.ProofId.DEPOSIT, client_proofs_1.ProofId.WITHDRAW].includes(tx.proofId)) ||
    txs.find(tx => tx.proofId === client_proofs_1.ProofId.SEND && !tx.isSender) ||
    txs.find(tx => !getFee(tx).value);
const toUserTx = (txs) => {
    const primaryTx = getPrimaryTx(txs);
    if (!primaryTx) {
        return;
    }
    const fee = getTotalFee(txs);
    switch (primaryTx.proofId) {
        case client_proofs_1.ProofId.ACCOUNT: {
            const depositTx = txs.find(tx => tx.proofId === client_proofs_1.ProofId.DEPOSIT);
            const depositValue = depositTx ? getPaymentValue(depositTx) : emptyAssetValue;
            if (depositValue.value) {
                return [toUserAccountTx(primaryTx, emptyAssetValue), toUserPaymentTx(depositTx, depositValue, fee)];
            }
            return [toUserAccountTx(primaryTx, fee)];
        }
        case client_proofs_1.ProofId.DEFI_DEPOSIT: {
            const userDefiTx = toUserDefiTx(primaryTx, fee);
            if (userDefiTx.interactionResult.finalised) {
                return [userDefiTx, toUserDefiClaimTx(primaryTx.claimTxId, userDefiTx)];
            }
            return [userDefiTx];
        }
        default: {
            const value = getPaymentValue(primaryTx);
            return [toUserPaymentTx(primaryTx, value, fee)];
        }
    }
};
const groupTxsByTxRefNo = (txs) => {
    const txGroups = new Map();
    for (const tx of txs) {
        const { txRefNo } = tx;
        if (!txRefNo) {
            // If txRefNo is 0, this tx is not part of a tx group.
            txGroups.set(tx.txId.toBuffer().readUInt32BE(0), [tx]);
        }
        else {
            const group = txGroups.get(txRefNo) || [];
            txGroups.set(txRefNo, [...group, tx]);
        }
    }
    return [...txGroups.values()];
};
const filterUndefined = (ts) => ts.filter((t) => !!t);
const bySettled = (tx1, tx2) => {
    if (tx1.settled && tx2.settled)
        return tx2.settled.getTime() - tx1.settled.getTime();
    if (!tx1.settled && !tx2.settled)
        return 0;
    if (!tx1.settled)
        return -1;
    if (!tx2.settled)
        return 1;
    return 0;
};
const groupUserTxs = (txs) => {
    const txGroups = groupTxsByTxRefNo(txs);
    return filterUndefined(txGroups.map(txs => toUserTx(txs)))
        .flat()
        .sort(bySettled);
};
exports.groupUserTxs = groupUserTxs;
//# sourceMappingURL=data:application/json;base64,