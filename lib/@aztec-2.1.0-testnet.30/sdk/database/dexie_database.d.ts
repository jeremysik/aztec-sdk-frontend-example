/// <reference types="node" />
import { AccountId, AliasHash } from '@aztec/barretenberg/account_id';
import { GrumpkinAddress } from '@aztec/barretenberg/address';
import { TxId } from '@aztec/barretenberg/tx_id';
import { CoreAccountTx, CoreClaimTx, CoreDefiTx, CorePaymentTx } from '../core_tx';
import { Note } from '../note';
import { UserData } from '../user';
import { Alias, Database, SigningKey } from './database';
export declare class DexieDatabase implements Database {
    private dbName;
    private version;
    private dexie;
    private user;
    private userKeys;
    private userTx;
    private note;
    private claimTx;
    private key;
    private alias;
    private mutex;
    constructor(dbName?: string, version?: number);
    init(): Promise<void>;
    private createTables;
    close(): Promise<void>;
    clear(): Promise<void>;
    addNote(note: Note): Promise<void>;
    getNote(commitment: Buffer): Promise<Note | undefined>;
    getNoteByNullifier(nullifier: Buffer): Promise<Note | undefined>;
    nullifyNote(nullifier: Buffer): Promise<void>;
    addClaimTx(tx: CoreClaimTx): Promise<void>;
    getClaimTx(nullifier: Buffer): Promise<CoreClaimTx | undefined>;
    getUserNotes(userId: AccountId): Promise<Note[]>;
    getUserPendingNotes(userId: AccountId): Promise<Note[]>;
    removeNote(nullifier: Buffer): Promise<void>;
    getUser(userId: AccountId): Promise<UserData | undefined>;
    getUsers(): Promise<UserData[]>;
    addUser(user: UserData): Promise<void>;
    updateUser(user: UserData): Promise<void>;
    addPaymentTx(tx: CorePaymentTx): Promise<void>;
    getPaymentTx(txId: TxId, userId: AccountId): Promise<CorePaymentTx | undefined>;
    getPaymentTxs(userId: AccountId): Promise<CorePaymentTx[]>;
    settlePaymentTx(txId: TxId, userId: AccountId, settled: Date): Promise<void>;
    addAccountTx(tx: CoreAccountTx): Promise<void>;
    getAccountTx(txId: TxId): Promise<CoreAccountTx | undefined>;
    getAccountTxs(userId: AccountId): Promise<CoreAccountTx[]>;
    settleAccountTx(txId: TxId, settled: Date): Promise<void>;
    addDefiTx(tx: CoreDefiTx): Promise<void>;
    getDefiTx(txId: TxId): Promise<CoreDefiTx | undefined>;
    getDefiTxs(userId: AccountId): Promise<CoreDefiTx[]>;
    getDefiTxsByNonce(userId: AccountId, interactionNonce: number): Promise<CoreDefiTx[]>;
    settleDefiDeposit(txId: TxId, interactionNonce: number, isAsync: boolean, settled: Date): Promise<void>;
    updateDefiTxFinalisationResult(txId: TxId, success: boolean, outputValueA: bigint, outputValueB: bigint, finalised: Date): Promise<void>;
    settleDefiTx(txId: TxId, claimSettled: Date, claimTxId: TxId): Promise<void>;
    getUserTxs(userId: AccountId): Promise<(CoreAccountTx | CoreDefiTx | CorePaymentTx)[]>;
    isUserTxSettled(txId: TxId): Promise<boolean>;
    getPendingUserTxs(userId: AccountId): Promise<TxId[]>;
    removeUserTx(txId: TxId, userId: AccountId): Promise<void>;
    removeUser(userId: AccountId): Promise<void>;
    resetUsers(): Promise<void>;
    deleteKey(name: string): Promise<void>;
    addKey(name: string, value: Buffer): Promise<void>;
    getKey(name: string): Promise<Buffer | undefined>;
    addUserSigningKey({ accountId, key, treeIndex, hashPath }: SigningKey): Promise<void>;
    addUserSigningKeys(signingKeys: SigningKey[]): Promise<void>;
    getUserSigningKeys(accountId: AccountId): Promise<SigningKey[]>;
    getUserSigningKey(accountId: AccountId, signingKey: GrumpkinAddress): Promise<SigningKey | undefined>;
    removeUserSigningKeys(accountId: AccountId): Promise<void>;
    setAlias(alias: Alias): Promise<void>;
    setAliases(aliases: Alias[]): Promise<void>;
    getAlias(aliasHash: AliasHash, address: GrumpkinAddress): Promise<Alias | undefined>;
    getAliases(aliasHash: AliasHash): Promise<Alias[]>;
    getLatestNonceByAddress(address: GrumpkinAddress): Promise<number>;
    getLatestNonceByAliasHash(aliasHash: AliasHash): Promise<number>;
    getAliasHashByAddress(address: GrumpkinAddress, accountNonce?: number): Promise<AliasHash | undefined>;
    getAccountId(aliasHash: AliasHash, accountNonce?: number): Promise<AccountId | undefined>;
    acquireLock(name: string, timeout: number): Promise<boolean>;
    extendLock(name: string, timeout: number): Promise<void>;
    releaseLock(name: string): Promise<void>;
}
//# sourceMappingURL=dexie_database.d.ts.map