/// <reference types="node" />
import { AccountId, AliasHash } from '@aztec/barretenberg/account_id';
import { GrumpkinAddress } from '@aztec/barretenberg/address';
import { TxId } from '@aztec/barretenberg/tx_id';
import { Connection, ConnectionOptions } from 'typeorm';
import { CoreAccountTx, CoreClaimTx, CoreDefiTx, CorePaymentTx } from '../../core_tx';
import { Note } from '../../note';
import { UserData } from '../../user';
import { Alias, Database, SigningKey } from '../database';
import { AliasDao } from './alias_dao';
import { ClaimTxDao } from './claim_tx_dao';
import { UserDataDao } from './user_data_dao';
import { UserKeyDao } from './user_key_dao';
export declare const getOrmConfig: (memoryDb?: boolean, identifier?: string | undefined) => ConnectionOptions;
export declare class SQLDatabase implements Database {
    private connection;
    private accountTxRep;
    private aliasRep;
    private claimTxRep;
    private defiTxRep;
    private keyRep;
    private noteRep;
    private paymentTxRep;
    private userDataRep;
    private userKeyRep;
    private mutex;
    constructor(connection: Connection);
    init(): Promise<void>;
    close(): Promise<void>;
    clear(): Promise<void>;
    addNote(note: Note): Promise<void>;
    getNote(commitment: Buffer): Promise<Note | undefined>;
    getNoteByNullifier(nullifier: Buffer): Promise<Note | undefined>;
    nullifyNote(nullifier: Buffer): Promise<void>;
    getUserNotes(userId: AccountId): Promise<Note[]>;
    getUserPendingNotes(userId: AccountId): Promise<Note[]>;
    removeNote(nullifier: Buffer): Promise<void>;
    getUser(userId: AccountId): Promise<UserDataDao | undefined>;
    addUser(user: UserData): Promise<void>;
    getUsers(): Promise<UserDataDao[]>;
    updateUser(user: UserData): Promise<void>;
    removeUser(userId: AccountId): Promise<void>;
    resetUsers(): Promise<void>;
    addPaymentTx(tx: CorePaymentTx): Promise<void>;
    getPaymentTx(txId: TxId, userId: AccountId): Promise<CorePaymentTx | undefined>;
    getPaymentTxs(userId: any): Promise<CorePaymentTx[]>;
    settlePaymentTx(txId: TxId, userId: AccountId, settled: Date): Promise<void>;
    addAccountTx(tx: CoreAccountTx): Promise<void>;
    getAccountTx(txId: TxId): Promise<CoreAccountTx | undefined>;
    getAccountTxs(userId: any): Promise<CoreAccountTx[]>;
    settleAccountTx(txId: TxId, settled: Date): Promise<void>;
    addDefiTx(tx: CoreDefiTx): Promise<void>;
    getDefiTx(txId: TxId): Promise<CoreDefiTx | undefined>;
    getDefiTxs(userId: any): Promise<CoreDefiTx[]>;
    getDefiTxsByNonce(userId: AccountId, interactionNonce: number): Promise<CoreDefiTx[]>;
    settleDefiDeposit(txId: TxId, interactionNonce: number, isAsync: boolean, settled: Date): Promise<void>;
    updateDefiTxFinalisationResult(txId: TxId, success: boolean, outputValueA: bigint, outputValueB: bigint, finalised: Date): Promise<void>;
    settleDefiTx(txId: TxId, claimSettled: Date, claimTxId: TxId): Promise<void>;
    addClaimTx(tx: CoreClaimTx): Promise<void>;
    getClaimTx(nullifier: Buffer): Promise<ClaimTxDao | undefined>;
    getUserTxs(userId: AccountId): Promise<(CoreAccountTx | CoreDefiTx | CorePaymentTx)[]>;
    isUserTxSettled(txId: TxId): Promise<boolean>;
    getPendingUserTxs(userId: AccountId): Promise<TxId[]>;
    removeUserTx(txId: TxId, userId: AccountId): Promise<void>;
    addUserSigningKey(signingKey: SigningKey): Promise<void>;
    addBulkItems<Entity, InputType>(entityName: string, items: InputType[], newEntity: {
        new (input: InputType): Entity;
    }, initialBatchSize: any): Promise<void>;
    addUserSigningKeys(signingKeys: SigningKey[]): Promise<void>;
    getUserSigningKeys(accountId: AccountId): Promise<UserKeyDao[]>;
    getUserSigningKey(accountId: AccountId, key: GrumpkinAddress): Promise<UserKeyDao | undefined>;
    removeUserSigningKeys(accountId: AccountId): Promise<void>;
    setAlias(alias: Alias): Promise<void>;
    setAliases(aliases: Alias[]): Promise<void>;
    getAlias(aliasHash: AliasHash, address: GrumpkinAddress): Promise<AliasDao | undefined>;
    getAliases(aliasHash: AliasHash): Promise<AliasDao[]>;
    getLatestNonceByAddress(address: GrumpkinAddress): Promise<number | undefined>;
    getLatestNonceByAliasHash(aliasHash: AliasHash): Promise<number | undefined>;
    getAliasHashByAddress(address: GrumpkinAddress, accountNonce?: number): Promise<AliasHash | undefined>;
    getAccountId(aliasHash: AliasHash, accountNonce?: number): Promise<AccountId | undefined>;
    addKey(name: string, value: Buffer): Promise<void>;
    getKey(name: string): Promise<Buffer | undefined>;
    deleteKey(name: string): Promise<void>;
    acquireLock(name: string, timeout: number): Promise<boolean>;
    extendLock(name: string, timeout: number): Promise<void>;
    releaseLock(name: string): Promise<void>;
}
//# sourceMappingURL=index.d.ts.map