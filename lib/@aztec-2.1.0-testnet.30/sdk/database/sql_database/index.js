"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SQLDatabase = exports.getOrmConfig = void 0;
const account_id_1 = require("@aztec/barretenberg/account_id");
const typeorm_1 = require("typeorm");
const core_tx_1 = require("../../core_tx");
const account_tx_dao_1 = require("./account_tx_dao");
const alias_dao_1 = require("./alias_dao");
const claim_tx_dao_1 = require("./claim_tx_dao");
const defi_tx_dao_1 = require("./defi_tx_dao");
const key_dao_1 = require("./key_dao");
const mutex_dao_1 = require("./mutex_dao");
const note_dao_1 = require("./note_dao");
const payment_tx_dao_1 = require("./payment_tx_dao");
const user_data_dao_1 = require("./user_data_dao");
const user_key_dao_1 = require("./user_key_dao");
const getOrmConfig = (memoryDb = false, identifier) => {
    const folder = identifier ? `/${identifier}` : '';
    const dbPath = `./data${folder}`;
    const suffix = identifier ? `-${identifier}` : '';
    return {
        name: `aztec2-sdk${suffix}`,
        type: 'sqlite',
        database: memoryDb ? ':memory:' : `${dbPath}/aztec2-sdk.sqlite`,
        entities: [
            account_tx_dao_1.AccountTxDao,
            alias_dao_1.AliasDao,
            claim_tx_dao_1.ClaimTxDao,
            defi_tx_dao_1.DefiTxDao,
            key_dao_1.KeyDao,
            mutex_dao_1.MutexDao,
            note_dao_1.NoteDao,
            payment_tx_dao_1.PaymentTxDao,
            user_data_dao_1.UserDataDao,
            user_key_dao_1.UserKeyDao,
        ],
        synchronize: true,
        logging: false,
    };
};
exports.getOrmConfig = getOrmConfig;
const toCorePaymentTx = (tx) => new core_tx_1.CorePaymentTx(tx.txId, tx.userId, tx.proofId, tx.assetId, tx.publicValue, tx.publicOwner, tx.privateInput, tx.recipientPrivateOutput, tx.senderPrivateOutput, tx.isRecipient, tx.isSender, tx.txRefNo, tx.created, tx.settled);
const toCoreAccountTx = (tx) => new core_tx_1.CoreAccountTx(tx.txId, tx.userId, tx.aliasHash, tx.newSigningPubKey1, tx.newSigningPubKey2, tx.migrated, tx.txRefNo, tx.created, tx.settled);
const toCoreDefiTx = (tx) => new core_tx_1.CoreDefiTx(tx.txId, tx.userId, tx.bridgeId, tx.depositValue, tx.txFee, tx.partialStateSecret, tx.txRefNo, tx.created, tx.settled, tx.interactionNonce, tx.isAsync, tx.success, tx.outputValueA, tx.outputValueB, tx.finalised, tx.claimSettled, tx.claimTxId);
const sortUserTxs = (txs) => {
    const unsettled = txs.filter(tx => !tx.settled).sort((a, b) => (a.created < b.created ? 1 : -1));
    const settled = txs.filter(tx => tx.settled);
    return [...unsettled, ...settled];
};
class SQLDatabase {
    constructor(connection) {
        this.connection = connection;
        this.accountTxRep = this.connection.getRepository(account_tx_dao_1.AccountTxDao);
        this.aliasRep = this.connection.getRepository(alias_dao_1.AliasDao);
        this.claimTxRep = this.connection.getRepository(claim_tx_dao_1.ClaimTxDao);
        this.defiTxRep = this.connection.getRepository(defi_tx_dao_1.DefiTxDao);
        this.keyRep = this.connection.getRepository(key_dao_1.KeyDao);
        this.noteRep = this.connection.getRepository(note_dao_1.NoteDao);
        this.paymentTxRep = this.connection.getRepository(payment_tx_dao_1.PaymentTxDao);
        this.userDataRep = this.connection.getRepository(user_data_dao_1.UserDataDao);
        this.userKeyRep = this.connection.getRepository(user_key_dao_1.UserKeyDao);
        this.mutex = this.connection.getRepository(mutex_dao_1.MutexDao);
    }
    async init() { }
    async close() {
        await this.connection.close();
    }
    async clear() {
        await this.connection.synchronize(true);
    }
    async addNote(note) {
        await this.noteRep.save((0, note_dao_1.noteToNoteDao)(note));
    }
    async getNote(commitment) {
        const note = await this.noteRep.findOne({ commitment });
        return note ? (0, note_dao_1.noteDaoToNote)(note) : undefined;
    }
    async getNoteByNullifier(nullifier) {
        const note = await this.noteRep.findOne({ nullifier });
        return note ? (0, note_dao_1.noteDaoToNote)(note) : undefined;
    }
    async nullifyNote(nullifier) {
        await this.noteRep.update({ nullifier }, { nullified: true });
    }
    async getUserNotes(userId) {
        return (await this.noteRep.find({ where: { owner: userId, nullified: false } })).map(note_dao_1.noteDaoToNote);
    }
    async getUserPendingNotes(userId) {
        return (await this.noteRep.find({ where: { owner: userId, index: (0, typeorm_1.IsNull)() } })).map(note_dao_1.noteDaoToNote);
    }
    async removeNote(nullifier) {
        await this.noteRep.delete({ nullifier });
    }
    async getUser(userId) {
        return this.userDataRep.findOne({ id: userId });
    }
    async addUser(user) {
        await this.userDataRep.save(user);
    }
    async getUsers() {
        return this.userDataRep.find();
    }
    async updateUser(user) {
        await this.userDataRep.update({ id: user.id }, user);
    }
    async removeUser(userId) {
        const user = await this.getUser(userId);
        if (!user)
            return;
        await this.accountTxRep.delete({ userId });
        await this.claimTxRep.delete({ userId });
        await this.paymentTxRep.delete({ userId });
        await this.userKeyRep.delete({ accountId: userId });
        await this.noteRep.delete({ owner: userId });
        await this.userDataRep.delete({ id: userId });
    }
    async resetUsers() {
        await this.aliasRep.clear();
        await this.noteRep.clear();
        await this.userKeyRep.clear();
        await this.accountTxRep.clear();
        await this.claimTxRep.clear();
        await this.paymentTxRep.clear();
        await this.userDataRep.update({ syncedToRollup: (0, typeorm_1.MoreThan)(-1) }, { syncedToRollup: -1 });
    }
    async addPaymentTx(tx) {
        await this.paymentTxRep.save({ ...tx }); // save() will mutate tx, changing undefined values to null.
    }
    async getPaymentTx(txId, userId) {
        const tx = await this.paymentTxRep.findOne({ txId, userId });
        return tx ? toCorePaymentTx(tx) : undefined;
    }
    async getPaymentTxs(userId) {
        const txs = await this.paymentTxRep.find({ where: { userId }, order: { settled: 'DESC' } });
        return sortUserTxs(txs).map(toCorePaymentTx);
    }
    async settlePaymentTx(txId, userId, settled) {
        await this.paymentTxRep.update({ txId, userId }, { settled });
    }
    async addAccountTx(tx) {
        await this.accountTxRep.save({ ...tx }); // save() will mutate tx, changing undefined values to null.
    }
    async getAccountTx(txId) {
        const tx = await this.accountTxRep.findOne({ txId });
        return tx ? toCoreAccountTx(tx) : undefined;
    }
    async getAccountTxs(userId) {
        const txs = await this.accountTxRep.find({ where: { userId }, order: { settled: 'DESC' } });
        return sortUserTxs(txs).map(toCoreAccountTx);
    }
    async settleAccountTx(txId, settled) {
        await this.accountTxRep.update({ txId }, { settled });
    }
    async addDefiTx(tx) {
        await this.defiTxRep.save({ ...tx }); // save() will mutate tx, changing undefined values to null.
    }
    async getDefiTx(txId) {
        const tx = await this.defiTxRep.findOne({ txId });
        return tx ? toCoreDefiTx(tx) : undefined;
    }
    async getDefiTxs(userId) {
        const txs = await this.defiTxRep.find({ where: { userId }, order: { settled: 'DESC' } });
        return sortUserTxs(txs).map(toCoreDefiTx);
    }
    async getDefiTxsByNonce(userId, interactionNonce) {
        const txs = await this.defiTxRep.find({ where: { userId, interactionNonce }, order: { settled: 'DESC' } });
        return sortUserTxs(txs).map(toCoreDefiTx);
    }
    async settleDefiDeposit(txId, interactionNonce, isAsync, settled) {
        await this.defiTxRep.update({ txId }, { interactionNonce, isAsync, settled });
    }
    async updateDefiTxFinalisationResult(txId, success, outputValueA, outputValueB, finalised) {
        await this.defiTxRep.update({ txId }, { success, outputValueA, outputValueB, finalised });
    }
    async settleDefiTx(txId, claimSettled, claimTxId) {
        await this.defiTxRep.update({ txId }, { claimSettled, claimTxId });
    }
    async addClaimTx(tx) {
        await this.claimTxRep.save(tx);
    }
    async getClaimTx(nullifier) {
        return this.claimTxRep.findOne({ nullifier });
    }
    async getUserTxs(userId) {
        const txs = (await Promise.all([this.getAccountTxs(userId), this.getPaymentTxs(userId), this.getDefiTxs(userId)])).flat();
        const unsettled = txs.filter(tx => !tx.settled).sort((a, b) => (a.created < b.created ? 1 : -1));
        const settled = txs
            .filter(tx => tx.settled)
            .sort((a, b) => (a.settled < b.settled ? 1 : a.settled > b.settled ? -1 : 0));
        return [...unsettled, ...settled];
    }
    async isUserTxSettled(txId) {
        const jsTxs = await this.paymentTxRep.find({ where: { txId } });
        if (jsTxs.length > 0) {
            return jsTxs.every(tx => tx.settled);
        }
        const defiTx = await this.defiTxRep.findOne({ where: { txId } });
        if (defiTx) {
            return !!defiTx.settled;
        }
        const accountTx = await this.accountTxRep.findOne({ where: { txId } });
        return !!(accountTx === null || accountTx === void 0 ? void 0 : accountTx.settled);
    }
    async getPendingUserTxs(userId) {
        const unsettledTxs = await Promise.all([
            this.accountTxRep.find({ where: { userId, settled: (0, typeorm_1.IsNull)() } }),
            this.paymentTxRep.find({ where: { userId, settled: (0, typeorm_1.IsNull)() } }),
            this.defiTxRep.find({ where: { userId, settled: (0, typeorm_1.IsNull)() } }),
        ]);
        return unsettledTxs.flat().map(({ txId }) => txId);
    }
    async removeUserTx(txId, userId) {
        await Promise.all([
            this.accountTxRep.delete({ txId }),
            this.paymentTxRep.delete({ txId, userId }),
            this.defiTxRep.delete({ txId, userId }),
        ]);
    }
    async addUserSigningKey(signingKey) {
        await this.userKeyRep.save(signingKey);
    }
    // attempt to efficiently bulk upsert a large number of entities in one transaction
    // performed using smaller batch sizes as a single save on anything more than a few hundred entities throws SQL exceptions
    // the batch size that's possible with the given entity isn't known in advance, so we use an initial size and attempt the set of upserts
    // if the operation fails we reduce the batch size and try again
    // here we are using QueryRunner instead of EntityManager as it gives us finer control over the transaction execution
    async addBulkItems(entityName, items, newEntity, initialBatchSize) {
        let batchSize = initialBatchSize;
        let commited = false;
        while (!commited) {
            const itemsCopy = [...items];
            const connection = (0, typeorm_1.getConnection)(this.connection.name);
            const queryRunner = connection.createQueryRunner();
            // establish real database connection using our new query runner
            await queryRunner.connect();
            const entities = queryRunner.manager.getRepository(entityName);
            await queryRunner.startTransaction();
            try {
                while (itemsCopy.length) {
                    const keysSlice = itemsCopy.slice(0, batchSize).map(k => new newEntity(k));
                    await entities.save(keysSlice);
                    itemsCopy.splice(0, batchSize);
                }
                await queryRunner.commitTransaction();
                await queryRunner.release();
                commited = true;
            }
            catch (err) {
                await queryRunner.rollbackTransaction();
                await queryRunner.release();
                batchSize /= 2;
                if (batchSize < 1) {
                    throw new Error(`Unable to insert entity, error: ${err}`);
                }
                batchSize = Math.round(batchSize);
            }
        }
    }
    async addUserSigningKeys(signingKeys) {
        await this.addBulkItems('UserKeyDao', signingKeys, user_key_dao_1.UserKeyDao, 100);
    }
    async getUserSigningKeys(accountId) {
        return await this.userKeyRep.find({ accountId });
    }
    async getUserSigningKey(accountId, key) {
        const keyBuffer = key.toBuffer();
        const signingKey = await this.userKeyRep.findOne({ where: { accountId, key: keyBuffer.slice(0, 32) } });
        return signingKey !== null && signingKey !== void 0 ? signingKey : undefined;
    }
    async removeUserSigningKeys(accountId) {
        await this.userKeyRep.delete({ accountId });
    }
    async setAlias(alias) {
        await this.aliasRep.save(alias);
    }
    async setAliases(aliases) {
        await this.addBulkItems('AliasDao', aliases, alias_dao_1.AliasDao, 100);
    }
    async getAlias(aliasHash, address) {
        return this.aliasRep.findOne({ aliasHash, address });
    }
    async getAliases(aliasHash) {
        return this.aliasRep.find({ aliasHash });
    }
    async getLatestNonceByAddress(address) {
        const alias = await this.aliasRep.findOne({ where: { address }, order: { latestNonce: 'DESC' } });
        return alias === null || alias === void 0 ? void 0 : alias.latestNonce;
    }
    async getLatestNonceByAliasHash(aliasHash) {
        const alias = await this.aliasRep.findOne({ where: { aliasHash }, order: { latestNonce: 'DESC' } });
        return alias === null || alias === void 0 ? void 0 : alias.latestNonce;
    }
    async getAliasHashByAddress(address, accountNonce) {
        const alias = await this.aliasRep.findOne({
            where: { address, latestNonce: (0, typeorm_1.MoreThanOrEqual)(accountNonce || 0) },
            order: { latestNonce: accountNonce !== undefined ? 'ASC' : 'DESC' },
        });
        return alias === null || alias === void 0 ? void 0 : alias.aliasHash;
    }
    async getAccountId(aliasHash, accountNonce) {
        const alias = await this.aliasRep.findOne({
            where: { aliasHash, latestNonce: (0, typeorm_1.MoreThanOrEqual)(accountNonce || 0) },
            order: { latestNonce: accountNonce !== undefined ? 'ASC' : 'DESC' },
        });
        return alias ? new account_id_1.AccountId(alias.address, accountNonce !== null && accountNonce !== void 0 ? accountNonce : alias.latestNonce) : undefined;
    }
    async addKey(name, value) {
        await this.keyRep.save({ name, value });
    }
    async getKey(name) {
        const key = await this.keyRep.findOne({ name });
        return key ? key.value : undefined;
    }
    async deleteKey(name) {
        await this.keyRep.delete({ name });
    }
    async acquireLock(name, timeout) {
        await this.mutex.delete({ name, expiredAt: (0, typeorm_1.LessThanOrEqual)(Date.now()) });
        try {
            await this.mutex.insert({ name, expiredAt: Date.now() + timeout });
            return true;
        }
        catch (e) {
            return false;
        }
    }
    async extendLock(name, timeout) {
        await this.mutex.update(name, { expiredAt: Date.now() + timeout });
    }
    async releaseLock(name) {
        await this.mutex.delete({ name });
    }
}
exports.SQLDatabase = SQLDatabase;
//# sourceMappingURL=data:application/json;base64,